2. 08_Class

[스태틱 메소드]
static - 첫 파라미터로 객체 참조 불가 
static -> 프로그램 실행시 바로 선언부와 메소드 메모리 할당
반면에 , 멤버변수는 static존재할때 존재하는지 안하는지 몰ㄹ  ㅏ ! !
static은 생성된지 안된지 모르는 멤버변수를 사용할수없어 !!!
--> static안의 멤버변수는 만들어서 사용할수있음

[인스턴스 메소드]
instance method 객체가 생성됐을 때 객체가 instance화 되는거!!

[클래스 메소드]
class는 객체참조가능, 클래스 멤버변수에 접근가능, 스태틱처럼 사용할수도 있다.
    # class method(클래스 메소드)
    # static처럼 호출하여 사용하지만, static에서 불가능한 객체 참조가 가능해짐

[bound]
참조변수로 접근해서 값을 주지 않아도 알아서 넣어서 인자를 엮어줌 

[unbounde] 참조 변수로 접근이 아닌 직접 호출 후 , 인자로 해당 객체를 직접 전달 



# Class.py
#   멤버 변수, 멤버 메소드, 생성자, 소멸자로 구성

print('-----------------------------------------------------------------------')
class MyString:
    pass    # 선언부에 다음 구현부를 생략.

s = MyString()
print(type(s))
print(MyString.__bases__)

s2 = str()  # 데이터 타입인 str
print(type(s2))
print(str.__bases__)

print('-----------------------------------------------------------------------')

# Bound Instance Method
class Point:
    def get_x(self):
        return self.x
    def set_x(self, x):
        self.x = x
    def get_y(self):
        return self.y
    def set_y(self, y):
        self.y = y

    #self == this 라고 보면 됨 
    #self : 첫 번째 파라미터, 즉 나 자신의 객체를 참조 목적
    # ★ 인스턴스 객체 호출을 위해서 -> 첫 번째 파라미터로 정의 필수!
    
#    instance method(인스턴스 메소드)       
#    def view():
#        print('view() Called.....')   ---> error!!
    
#    def view(self):   # 첫 번째 파라미터로 객체 자신을 참조할 수 있도록 ! 
#        print('view() Called.....')

    # 멤버 변수
    num = 10

    # static method(정적 메소드)
    @staticmethod   #장식자 -> 표시하는것 
#    def static_method(self):  # 첫 파라미터로 객체 참조 불가
    def static_method():      
        return 'static_method() Called....'
        #return num -> 클래스 멤버 변수에 접근 불가 
    
    # class method(클래스 메소드)
    # static처럼 호출하여 사용하지만, static에서 불가능한 객체 참조가 가능해짐
    @classmethod
    def class_method(cls):   # 첫 파라미터로 객체 참조 가능
        #return 'class_method() Called....'
        return cls.num       # 클래스 멤버 변수에 접근 가능 

# bound : 자동으로 객체를 엮어줌 
def bound_class_method():
    p = Point()     # == p = new Point() 같은거
    p.set_x(10)
    p.set_y(20)
    print(p.get_x(), p.get_y(), sep=', ')

# unbound : 객체를 넘겨주는 방식
def unbound_class_method():
    p = Point()
    Point.set_x(p, 10)     # 참조 변수로 접근이 아닌 직접 호출 후 , 
    Point.set_y(p, 20)     # 인자로 해당 객체를 직접 전달 
    print(p.get_x(), p.get_y(), sep=', ')
    







def main():
    #bound_class_method()
    #unbound_class_method()
    #print(Point.static_method()) # Point클래스의 static 메소드 호출
    #print(Point.class_method())  # Point클래스의 class 메소드 호출
    
main() # 자바의 main처럼 보이기 위해 호출(JVM이 main을 호출하듯이)
    





